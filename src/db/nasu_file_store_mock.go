// Code generated by MockGen. DO NOT EDIT.
// Source: ./nasu_file_store.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNasuFileStore is a mock of NasuFileStore interface.
type MockNasuFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockNasuFileStoreMockRecorder
}

// MockNasuFileStoreMockRecorder is the mock recorder for MockNasuFileStore.
type MockNasuFileStoreMockRecorder struct {
	mock *MockNasuFileStore
}

// NewMockNasuFileStore creates a new mock instance.
func NewMockNasuFileStore(ctrl *gomock.Controller) *MockNasuFileStore {
	mock := &MockNasuFileStore{ctrl: ctrl}
	mock.recorder = &MockNasuFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNasuFileStore) EXPECT() *MockNasuFileStoreMockRecorder {
	return m.recorder
}

// DeleteNasuFileByFilename mocks base method.
func (m *MockNasuFileStore) DeleteNasuFileByFilename(filename string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNasuFileByFilename", filename)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteNasuFileByFilename indicates an expected call of DeleteNasuFileByFilename.
func (mr *MockNasuFileStoreMockRecorder) DeleteNasuFileByFilename(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNasuFileByFilename", reflect.TypeOf((*MockNasuFileStore)(nil).DeleteNasuFileByFilename), filename)
}

// InsertNasuFile mocks base method.
func (m *MockNasuFileStore) InsertNasuFile(nasuFile NasuFile) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNasuFile", nasuFile)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InsertNasuFile indicates an expected call of InsertNasuFile.
func (mr *MockNasuFileStoreMockRecorder) InsertNasuFile(nasuFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNasuFile", reflect.TypeOf((*MockNasuFileStore)(nil).InsertNasuFile), nasuFile)
}

// QueryNasuFileByHash mocks base method.
func (m *MockNasuFileStore) QueryNasuFileByHash(hash string) *NasuFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuFileByHash", hash)
	ret0, _ := ret[0].(*NasuFile)
	return ret0
}

// QueryNasuFileByHash indicates an expected call of QueryNasuFileByHash.
func (mr *MockNasuFileStoreMockRecorder) QueryNasuFileByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuFileByHash", reflect.TypeOf((*MockNasuFileStore)(nil).QueryNasuFileByHash), hash)
}

// QueryNasuFileById mocks base method.
func (m *MockNasuFileStore) QueryNasuFileById(id int64) *NasuFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuFileById", id)
	ret0, _ := ret[0].(*NasuFile)
	return ret0
}

// QueryNasuFileById indicates an expected call of QueryNasuFileById.
func (mr *MockNasuFileStoreMockRecorder) QueryNasuFileById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuFileById", reflect.TypeOf((*MockNasuFileStore)(nil).QueryNasuFileById), id)
}

// QueryNasuFiles mocks base method.
func (m *MockNasuFileStore) QueryNasuFiles() []NasuFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuFiles")
	ret0, _ := ret[0].([]NasuFile)
	return ret0
}

// QueryNasuFiles indicates an expected call of QueryNasuFiles.
func (mr *MockNasuFileStoreMockRecorder) QueryNasuFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuFiles", reflect.TypeOf((*MockNasuFileStore)(nil).QueryNasuFiles))
}

// QueryNasuFilesByCondition mocks base method.
func (m *MockNasuFileStore) QueryNasuFilesByCondition(filename, extension string, labels, tags []string, startTime, endTime string, pageSize, pageNum int) []NasuFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuFilesByCondition", filename, extension, labels, tags, startTime, endTime, pageSize, pageNum)
	ret0, _ := ret[0].([]NasuFile)
	return ret0
}

// QueryNasuFilesByCondition indicates an expected call of QueryNasuFilesByCondition.
func (mr *MockNasuFileStoreMockRecorder) QueryNasuFilesByCondition(filename, extension, labels, tags, startTime, endTime, pageSize, pageNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuFilesByCondition", reflect.TypeOf((*MockNasuFileStore)(nil).QueryNasuFilesByCondition), filename, extension, labels, tags, startTime, endTime, pageSize, pageNum)
}

// UpdateNasuFile mocks base method.
func (m *MockNasuFileStore) UpdateNasuFile(nasuFile *NasuFile) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNasuFile", nasuFile)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateNasuFile indicates an expected call of UpdateNasuFile.
func (mr *MockNasuFileStoreMockRecorder) UpdateNasuFile(nasuFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNasuFile", reflect.TypeOf((*MockNasuFileStore)(nil).UpdateNasuFile), nasuFile)
}
