// Code generated by MockGen. DO NOT EDIT.
// Source: ./nasu_meta_store.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNasuMetaStore is a mock of NasuMetaStore interface.
type MockNasuMetaStore struct {
	ctrl     *gomock.Controller
	recorder *MockNasuMetaStoreMockRecorder
}

// MockNasuMetaStoreMockRecorder is the mock recorder for MockNasuMetaStore.
type MockNasuMetaStoreMockRecorder struct {
	mock *MockNasuMetaStore
}

// NewMockNasuMetaStore creates a new mock instance.
func NewMockNasuMetaStore(ctrl *gomock.Controller) *MockNasuMetaStore {
	mock := &MockNasuMetaStore{ctrl: ctrl}
	mock.recorder = &MockNasuMetaStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNasuMetaStore) EXPECT() *MockNasuMetaStoreMockRecorder {
	return m.recorder
}

// DeleteNasuMetaByMetaTypeAndMetaValue mocks base method.
func (m *MockNasuMetaStore) DeleteNasuMetaByMetaTypeAndMetaValue(metaType, metaValue string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNasuMetaByMetaTypeAndMetaValue", metaType, metaValue)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteNasuMetaByMetaTypeAndMetaValue indicates an expected call of DeleteNasuMetaByMetaTypeAndMetaValue.
func (mr *MockNasuMetaStoreMockRecorder) DeleteNasuMetaByMetaTypeAndMetaValue(metaType, metaValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNasuMetaByMetaTypeAndMetaValue", reflect.TypeOf((*MockNasuMetaStore)(nil).DeleteNasuMetaByMetaTypeAndMetaValue), metaType, metaValue)
}

// InsertNasuMeta mocks base method.
func (m *MockNasuMetaStore) InsertNasuMeta(nasuMeta *NasuMeta) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNasuMeta", nasuMeta)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InsertNasuMeta indicates an expected call of InsertNasuMeta.
func (mr *MockNasuMetaStoreMockRecorder) InsertNasuMeta(nasuMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNasuMeta", reflect.TypeOf((*MockNasuMetaStore)(nil).InsertNasuMeta), nasuMeta)
}

// InsertNasuMetaIfNotExistedByMetaType mocks base method.
func (m *MockNasuMetaStore) InsertNasuMetaIfNotExistedByMetaType(nasuMeta *NasuMeta) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNasuMetaIfNotExistedByMetaType", nasuMeta)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InsertNasuMetaIfNotExistedByMetaType indicates an expected call of InsertNasuMetaIfNotExistedByMetaType.
func (mr *MockNasuMetaStoreMockRecorder) InsertNasuMetaIfNotExistedByMetaType(nasuMeta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNasuMetaIfNotExistedByMetaType", reflect.TypeOf((*MockNasuMetaStore)(nil).InsertNasuMetaIfNotExistedByMetaType), nasuMeta)
}

// QueryNasuMetaByType mocks base method.
func (m *MockNasuMetaStore) QueryNasuMetaByType(metaType string) *NasuMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuMetaByType", metaType)
	ret0, _ := ret[0].(*NasuMeta)
	return ret0
}

// QueryNasuMetaByType indicates an expected call of QueryNasuMetaByType.
func (mr *MockNasuMetaStoreMockRecorder) QueryNasuMetaByType(metaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuMetaByType", reflect.TypeOf((*MockNasuMetaStore)(nil).QueryNasuMetaByType), metaType)
}

// QueryNasuMetasByType mocks base method.
func (m *MockNasuMetaStore) QueryNasuMetasByType(metaType string) []NasuMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNasuMetasByType", metaType)
	ret0, _ := ret[0].([]NasuMeta)
	return ret0
}

// QueryNasuMetasByType indicates an expected call of QueryNasuMetasByType.
func (mr *MockNasuMetaStoreMockRecorder) QueryNasuMetasByType(metaType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNasuMetasByType", reflect.TypeOf((*MockNasuMetaStore)(nil).QueryNasuMetasByType), metaType)
}

// UpdateNasuMetaByType mocks base method.
func (m *MockNasuMetaStore) UpdateNasuMetaByType(metaType, metaValue string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNasuMetaByType", metaType, metaValue)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateNasuMetaByType indicates an expected call of UpdateNasuMetaByType.
func (mr *MockNasuMetaStoreMockRecorder) UpdateNasuMetaByType(metaType, metaValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNasuMetaByType", reflect.TypeOf((*MockNasuMetaStore)(nil).UpdateNasuMetaByType), metaType, metaValue)
}
